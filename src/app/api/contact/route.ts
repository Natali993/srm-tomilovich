import { NextRequest, NextResponse } from 'next/server';
import { Resend } from 'resend';
import nodemailer from 'nodemailer';

function getServiceName(service: string): string {
  const services: { [key: string]: string } = {
    'elektromontazh': '–ï–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–∞–∂–Ω—ñ —Ä–æ–±–æ—Ç–∏',
    'laboratory': '–ï–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä—ñ—è',
    'lightning': '–ë–ª–∏—Å–∫–∞–≤–∫–æ–∑–∞—Ö–∏—Å—Ç',
    'fireproof': '–ü—Ä–æ—Ç–∏–ø–æ–∂–µ–∂–Ω–∞ –æ–±—Ä–æ–±–∫–∞',
    'solar': '–°–æ–Ω—è—á–Ω—ñ –µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü—ñ—ó',
    'other': '–Ü–Ω—à–µ'
  };
  return services[service] || service || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ';
}

async function sendToTelegram(message: string): Promise<void> {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  const chatId = process.env.TELEGRAM_CHAT_ID;

  if (!botToken || !chatId) {
    throw new Error('Telegram credentials not configured');
  }

  const url = `https://api.telegram.org/bot${botToken}/sendMessage`;

  const response = await fetch(url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      chat_id: chatId,
      text: message,
      parse_mode: 'HTML'
    }),
  });

  if (!response.ok) {
    throw new Error(`Telegram API error: ${response.status}`);
  }
}

async function sendEmail(name: string, phone: string, email: string, service: string, message: string): Promise<void> {
  const resendApiKey = process.env.RESEND_API_KEY || "re_2HqbmmrB_Nxu5PZBNVBBdBpsTvRjibrj1"; // Replace with your Resend API key

  if (!resendApiKey) {
    console.log('‚ö†Ô∏è RESEND_API_KEY not configured, skipping email send');
    return;
  }

  const resend = new Resend(resendApiKey);

  const emailHtml = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9f9f9;">
      <div style="background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
        <h2 style="color: #0891b2; margin-bottom: 20px; border-bottom: 2px solid #0891b2; padding-bottom: 10px;">
          üîî –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –∑ —Å–∞–π—Ç—É
        </h2>

        <div style="margin-bottom: 15px;">
          <strong style="color: #374151;">üë§ –Ü–º'—è:</strong>
          <span style="margin-left: 10px; color: #6b7280;">${name}</span>
        </div>

        <div style="margin-bottom: 15px;">
          <strong style="color: #374151;">üìû –¢–µ–ª–µ—Ñ–æ–Ω:</strong>
          <span style="margin-left: 10px; color: #6b7280;">
            <a href="tel:${phone}" style="color: #0891b2; text-decoration: none;">${phone}</a>
          </span>
        </div>

        <div style="margin-bottom: 15px;">
          <strong style="color: #374151;">üìß Email:</strong>
          <span style="margin-left: 10px; color: #6b7280;">
            ${email ? `<a href="mailto:${email}" style="color: #0891b2; text-decoration: none;">${email}</a>` : '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
          </span>
        </div>

        <div style="margin-bottom: 15px;">
          <strong style="color: #374151;">üîß –ü–æ—Å–ª—É–≥–∞:</strong>
          <span style="margin-left: 10px; color: #6b7280;">${getServiceName(service)}</span>
        </div>

        <div style="margin-bottom: 20px;">
          <strong style="color: #374151;">üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</strong>
          <div style="margin-top: 10px; padding: 15px; background-color: #f3f4f6; border-radius: 5px; color: #6b7280;">
            ${message || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
          </div>
        </div>

        <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb; font-size: 12px; color: #9ca3af;">
          üìÖ –î–∞—Ç–∞: ${new Date().toLocaleString('uk-UA')}<br>
          üåê –î–∂–µ—Ä–µ–ª–æ: –¢–µ—Ö–Ω—ñ–∫
        </div>
      </div>
    </div>
  `;

  try {
    await resend.emails.send({
      from: '"Acme <onboarding@resend.dev>',
      to: ['texnik.ua@gmail.com'],
      subject: `üîî –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥ ${name}`,
      html: emailHtml,
    });

    console.log('‚úÖ Email sent successfully via Resend');
  } catch (error) {
    console.error('‚ùå Failed to send email via Resend:', error);
    throw error;
  }
}

async function sendEmailViaGmail(name: string, phone: string, email: string, service: string, message: string): Promise<void> {
  const gmailUser = process.env.GMAIL_USER;
  const gmailPassword = process.env.GMAIL_APP_PASSWORD;

  if (!gmailUser || !gmailPassword) {
    console.log('‚ö†Ô∏è Gmail credentials not configured, skipping Gmail send');
    return;
  }

  const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: gmailUser,
      pass: gmailPassword,
    },
  });

  const emailHtml = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9f9f9;">
      <div style="background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
        <h2 style="color: #0891b2; margin-bottom: 20px; border-bottom: 2px solid #0891b2; padding-bottom: 10px;">
          üîî –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –∑ —Å–∞–π—Ç—É
        </h2>

        <div style="margin-bottom: 15px;">
          <strong style="color: #374151;">üë§ –Ü–º'—è:</strong>
          <span style="margin-left: 10px; color: #6b7280;">${name}</span>
        </div>

        <div style="margin-bottom: 15px;">
          <strong style="color: #374151;">üìû –¢–µ–ª–µ—Ñ–æ–Ω:</strong>
          <span style="margin-left: 10px; color: #6b7280;">
            <a href="tel:${phone}" style="color: #0891b2; text-decoration: none;">${phone}</a>
          </span>
        </div>

        <div style="margin-bottom: 15px;">
          <strong style="color: #374151;">üìß Email:</strong>
          <span style="margin-left: 10px; color: #6b7280;">
            ${email ? `<a href="mailto:${email}" style="color: #0891b2; text-decoration: none;">${email}</a>` : '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
          </span>
        </div>

        <div style="margin-bottom: 15px;">
          <strong style="color: #374151;">üîß –ü–æ—Å–ª—É–≥–∞:</strong>
          <span style="margin-left: 10px; color: #6b7280;">${getServiceName(service)}</span>
        </div>

        <div style="margin-bottom: 20px;">
          <strong style="color: #374151;">üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</strong>
          <div style="margin-top: 10px; padding: 15px; background-color: #f3f4f6; border-radius: 5px; color: #6b7280;">
            ${message || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
          </div>
        </div>

        <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb; font-size: 12px; color: #9ca3af;">
          üìÖ –î–∞—Ç–∞: ${new Date().toLocaleString('uk-UA')}<br>
          üåê –î–∂–µ—Ä–µ–ª–æ: –°–∞–π—Ç srm-tomilovich.com
        </div>
      </div>
    </div>
  `;

  try {
    await transporter.sendMail({
      from: `"–°–∞–π—Ç –°–†–ú –¢–æ–º–∏–ª–æ–≤–∏—á" <${gmailUser}>`,
      to: 'texnik.ua@gmail.com',
      subject: `üîî –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥ ${name}`,
      html: emailHtml,
    });

    console.log('‚úÖ Email sent successfully via Gmail');
  } catch (error) {
    console.error('‚ùå Failed to send email via Gmail:', error);
    throw error;
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { name, phone, email, service, message } = body;

    // Validate required fields
    if (!name || !phone) {
      return NextResponse.json(
        { error: '–Ü–º\'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º–∏ –ø–æ–ª—è–º–∏' },
        { status: 400 }
      );
    }

    // Create email content
    const emailContent = `
      –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –∑ –¢–µ—Ö–Ω—ñ–∫:

      üë§ –Ü–º'—è: ${name}
      üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
      üìß Email: ${email || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
      üîß –ü–æ—Å–ª—É–≥–∞: ${getServiceName(service)}
      üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${message || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}

      üìÖ –î–∞—Ç–∞: ${new Date().toLocaleString('uk-UA')}
      üåê –î–∂–µ—Ä–µ–ª–æ: –°–∞–π—Ç srm-tomilovich.com
    `.trim();

    // Log the email content for now
    console.log('üìß Email to send to texnik.ua@gmail.com:', emailContent);

    // Try to send email via Resend first, then Gmail as fallback
    let emailSent = false;

    try {
      await sendEmail(name, phone, email, service, message);
      emailSent = true;
    } catch (error) {
      console.error('‚ùå Failed to send email via Resend:', error);

      // Try Gmail as fallback
      try {
        await sendEmailViaGmail(name, phone, email, service, message);
        emailSent = true;
      } catch (gmailError) {
        console.error('‚ùå Failed to send email via Gmail:', gmailError);
      }
    }

    if (!emailSent) {
      console.log('‚ö†Ô∏è No email service configured or all failed');
    }

    // Try to send to Telegram if bot token is configured
    if (process.env.TELEGRAM_BOT_TOKEN && process.env.TELEGRAM_CHAT_ID) {
      try {
        await sendToTelegram(emailContent);
        console.log('‚úÖ Message sent to Telegram');
      } catch (error) {
        console.error('‚ùå Failed to send to Telegram:', error);
      }
    }

    return NextResponse.json(
      {
        message: '–ó–∞—è–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú–∏ –∑–≤\'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.',
        success: true
      },
      { status: 200 }
    );

  } catch (error) {
    console.error('Error sending contact form:', error);
    return NextResponse.json(
      { error: '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.' },
      { status: 500 }
    );
  }
}
